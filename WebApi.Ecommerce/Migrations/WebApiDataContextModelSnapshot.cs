// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi.Ecommerce.Infra.Contexts;

namespace WebApi.Ecommerce.Migrations
{
    [DbContext(typeof(WebApiDataContext))]
    partial class WebApiDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("TRUE");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("address");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("cellphone");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("complement");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("createdat");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("document");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("name");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("number");

                    b.Property<string>("Phone")
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updatedat");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("zipcode");

                    b.HasKey("Id")
                        .HasName("Pk_Customers_Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.LogRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("TRUE");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("createdat");

                    b.Property<string>("Device")
                        .HasColumnType("VARCHAR(600)")
                        .HasColumnName("device");

                    b.Property<TimeSpan>("ExecutionTime")
                        .HasColumnType("TIME")
                        .HasColumnName("executiontime");

                    b.Property<string>("Header")
                        .HasColumnType("TEXT")
                        .HasColumnName("header");

                    b.Property<string>("Host")
                        .HasColumnType("VARCHAR(600)")
                        .HasColumnName("host");

                    b.Property<string>("Ip")
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("ip");

                    b.Property<string>("Method")
                        .HasColumnType("VARCHAR(600)")
                        .HasColumnName("method");

                    b.Property<string>("Path")
                        .HasColumnType("VARCHAR(600)")
                        .HasColumnName("path");

                    b.Property<string>("Query")
                        .HasColumnType("TEXT")
                        .HasColumnName("query");

                    b.Property<string>("Response")
                        .HasColumnType("TEXT")
                        .HasColumnName("response");

                    b.Property<int>("StatusCode")
                        .HasColumnType("INT")
                        .HasColumnName("statuscode");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updatedat");

                    b.Property<string>("Url")
                        .HasColumnType("VARCHAR(600)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("Pk_LogRequests_Id");

                    b.ToTable("LogRequests");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("TRUE");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("description");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("quantity")
                        .HasDefaultValueSql("0");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("sku");

                    b.Property<decimal?>("Sale")
                        .HasColumnType("numeric(19,4)")
                        .HasColumnName("sale");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("Pk_Products_Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("TRUE");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("createdat");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customerid");

                    b.Property<Guid?>("SaleTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("saletypeid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("Pk_Sales_Id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_sales_customerid");

                    b.HasIndex("SaleTypeId")
                        .HasDatabaseName("ix_sales_saletypeid");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.SaleProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<Guid>("SalesId")
                        .HasColumnType("uuid")
                        .HasColumnName("salesid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("pk_saleproducts");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_saleproducts_productid");

                    b.HasIndex("SalesId")
                        .HasDatabaseName("ix_saleproducts_salesid");

                    b.ToTable("saleproducts");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.SaleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("TRUE");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updatedat");

                    b.HasKey("Id")
                        .HasName("Pk_SaleTypes_Id");

                    b.ToTable("SaleTypes");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.Sale", b =>
                {
                    b.HasOne("WebApi.Ecommerce.Domain.Entities.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_sales_customers_customerid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApi.Ecommerce.Domain.Entities.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .HasConstraintName("fk_sales_saletypes_saletypeid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.SaleProduct", b =>
                {
                    b.HasOne("WebApi.Ecommerce.Domain.Entities.Product", "Products")
                        .WithMany("SaleProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_saleproducts_products_productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Ecommerce.Domain.Entities.Sale", "Sales")
                        .WithMany("SaleProducts")
                        .HasForeignKey("SalesId")
                        .HasConstraintName("fk_saleproducts_sales_salesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.Product", b =>
                {
                    b.Navigation("SaleProducts");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.Sale", b =>
                {
                    b.Navigation("SaleProducts");
                });

            modelBuilder.Entity("WebApi.Ecommerce.Domain.Entities.SaleType", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
